// Code generated by mockery v2.43.2. DO NOT EDIT.

package bot_mocks

import (
	context "context"
	bot "omni-balance/utils/bot"

	mock "github.com/stretchr/testify/mock"
)

// Bot is an autogenerated mock type for the Bot type
type Bot struct {
	mock.Mock
}

// Check provides a mock function with given fields: ctx, args
func (_m *Bot) Check(ctx context.Context, args bot.Params) ([]bot.Task, bot.ProcessType, error) {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for Check")
	}

	var r0 []bot.Task
	var r1 bot.ProcessType
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, bot.Params) ([]bot.Task, bot.ProcessType, error)); ok {
		return rf(ctx, args)
	}
	if rf, ok := ret.Get(0).(func(context.Context, bot.Params) []bot.Task); ok {
		r0 = rf(ctx, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bot.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, bot.Params) bot.ProcessType); ok {
		r1 = rf(ctx, args)
	} else {
		r1 = ret.Get(1).(bot.ProcessType)
	}

	if rf, ok := ret.Get(2).(func(context.Context, bot.Params) error); ok {
		r2 = rf(ctx, args)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Name provides a mock function with given fields:
func (_m *Bot) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewBot creates a new instance of Bot. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBot(t interface {
	mock.TestingT
	Cleanup(func())
}) *Bot {
	mock := &Bot{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
