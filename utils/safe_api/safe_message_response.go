// Code generated by go-swagger; DO NOT EDIT.

package safe_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SafeMessageResponse safe message response
//
// swagger:model SafeMessageResponse
type SafeMessageResponse struct {

	// Confirmations
	// Read Only: true
	Confirmations string `json:"confirmations,omitempty"`

	// Created
	// Required: true
	// Format: date-time
	Created *strfmt.DateTime `json:"created"`

	// Message
	// Required: true
	Message interface{} `json:"message"`

	// Message hash
	// Required: true
	MessageHash *string `json:"messageHash"`

	// Modified
	// Required: true
	// Format: date-time
	Modified *strfmt.DateTime `json:"modified"`

	// Prepared signature
	// Read Only: true
	PreparedSignature string `json:"preparedSignature,omitempty"`

	// Proposed by
	// Required: true
	ProposedBy *string `json:"proposedBy"`

	// Safe
	// Required: true
	Safe *string `json:"safe"`

	// Safe app id
	// Required: true
	SafeAppID *int64 `json:"safeAppId"`
}

// Validate validates this safe message response
func (m *SafeMessageResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessageHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProposedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSafe(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSafeAppID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SafeMessageResponse) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("created", "body", m.Created); err != nil {
		return err
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SafeMessageResponse) validateMessage(formats strfmt.Registry) error {

	if m.Message == nil {
		return errors.Required("message", "body", nil)
	}

	return nil
}

func (m *SafeMessageResponse) validateMessageHash(formats strfmt.Registry) error {

	if err := validate.Required("messageHash", "body", m.MessageHash); err != nil {
		return err
	}

	return nil
}

func (m *SafeMessageResponse) validateModified(formats strfmt.Registry) error {

	if err := validate.Required("modified", "body", m.Modified); err != nil {
		return err
	}

	if err := validate.FormatOf("modified", "body", "date-time", m.Modified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SafeMessageResponse) validateProposedBy(formats strfmt.Registry) error {

	if err := validate.Required("proposedBy", "body", m.ProposedBy); err != nil {
		return err
	}

	return nil
}

func (m *SafeMessageResponse) validateSafe(formats strfmt.Registry) error {

	if err := validate.Required("safe", "body", m.Safe); err != nil {
		return err
	}

	return nil
}

func (m *SafeMessageResponse) validateSafeAppID(formats strfmt.Registry) error {

	if err := validate.Required("safeAppId", "body", m.SafeAppID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this safe message response based on the context it is used
func (m *SafeMessageResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConfirmations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePreparedSignature(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SafeMessageResponse) contextValidateConfirmations(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "confirmations", "body", string(m.Confirmations)); err != nil {
		return err
	}

	return nil
}

func (m *SafeMessageResponse) contextValidatePreparedSignature(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "preparedSignature", "body", string(m.PreparedSignature)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SafeMessageResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SafeMessageResponse) UnmarshalBinary(b []byte) error {
	var res SafeMessageResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
