// Code generated by go-swagger; DO NOT EDIT.

package safe_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SafeOperationResponse safe operation response
//
// swagger:model SafeOperationResponse
type SafeOperationResponse struct {

	// Confirmations
	// Read Only: true
	Confirmations string `json:"confirmations,omitempty"`

	// Created
	// Required: true
	// Format: date-time
	Created *strfmt.DateTime `json:"created"`

	// Modified
	// Required: true
	// Format: date-time
	Modified *strfmt.DateTime `json:"modified"`

	// Module address
	// Required: true
	ModuleAddress *string `json:"moduleAddress"`

	// Prepared signature
	// Read Only: true
	PreparedSignature string `json:"preparedSignature,omitempty"`

	// Safe operation hash
	// Required: true
	SafeOperationHash *string `json:"safeOperationHash"`

	// Valid after
	// Required: true
	// Format: date-time
	ValidAfter *strfmt.DateTime `json:"validAfter"`

	// Valid until
	// Required: true
	// Format: date-time
	ValidUntil *strfmt.DateTime `json:"validUntil"`
}

// Validate validates this safe operation response
func (m *SafeOperationResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModuleAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSafeOperationHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidAfter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidUntil(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SafeOperationResponse) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("created", "body", m.Created); err != nil {
		return err
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SafeOperationResponse) validateModified(formats strfmt.Registry) error {

	if err := validate.Required("modified", "body", m.Modified); err != nil {
		return err
	}

	if err := validate.FormatOf("modified", "body", "date-time", m.Modified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SafeOperationResponse) validateModuleAddress(formats strfmt.Registry) error {

	if err := validate.Required("moduleAddress", "body", m.ModuleAddress); err != nil {
		return err
	}

	return nil
}

func (m *SafeOperationResponse) validateSafeOperationHash(formats strfmt.Registry) error {

	if err := validate.Required("safeOperationHash", "body", m.SafeOperationHash); err != nil {
		return err
	}

	return nil
}

func (m *SafeOperationResponse) validateValidAfter(formats strfmt.Registry) error {

	if err := validate.Required("validAfter", "body", m.ValidAfter); err != nil {
		return err
	}

	if err := validate.FormatOf("validAfter", "body", "date-time", m.ValidAfter.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SafeOperationResponse) validateValidUntil(formats strfmt.Registry) error {

	if err := validate.Required("validUntil", "body", m.ValidUntil); err != nil {
		return err
	}

	if err := validate.FormatOf("validUntil", "body", "date-time", m.ValidUntil.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this safe operation response based on the context it is used
func (m *SafeOperationResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConfirmations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePreparedSignature(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SafeOperationResponse) contextValidateConfirmations(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "confirmations", "body", string(m.Confirmations)); err != nil {
		return err
	}

	return nil
}

func (m *SafeOperationResponse) contextValidatePreparedSignature(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "preparedSignature", "body", string(m.PreparedSignature)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SafeOperationResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SafeOperationResponse) UnmarshalBinary(b []byte) error {
	var res SafeOperationResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
