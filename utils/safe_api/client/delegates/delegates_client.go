// Code generated by go-swagger; DO NOT EDIT.

package delegates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new delegates API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new delegates API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new delegates API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for delegates API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	V1DelegatesCreate(params *V1DelegatesCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1DelegatesCreateAccepted, error)

	V1DelegatesDelete(params *V1DelegatesDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1DelegatesDeleteNoContent, error)

	V1DelegatesList(params *V1DelegatesListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1DelegatesListOK, error)

	V2DelegatesCreate(params *V2DelegatesCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V2DelegatesCreateAccepted, error)

	V2DelegatesDelete(params *V2DelegatesDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V2DelegatesDeleteNoContent, error)

	V2DelegatesList(params *V2DelegatesListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V2DelegatesListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	V1DelegatesCreate Create a delegate for a Safe address with a custom label. Calls with same delegate but different label or

signer will update the label or delegator if different.
For the signature we are using TOTP with `T0=0` and `Tx=3600`. TOTP is calculated by taking the
Unix UTC epoch time (no milliseconds) and dividing by 3600 (natural division, no decimals)
For signature this hash need to be signed: keccak(checksummed address + str(int(current_epoch // 3600)))
For example:
  - We want to add the delegate `0x132512f995866CcE1b0092384A6118EDaF4508Ff` and `epoch=1586779140`.
  - `TOTP = epoch // 3600 = 1586779140 // 3600 = 440771`
  - The hash to sign by a Safe owner would be `keccak("0x132512f995866CcE1b0092384A6118EDaF4508Ff440771")`
*/
func (a *Client) V1DelegatesCreate(params *V1DelegatesCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1DelegatesCreateAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1DelegatesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "v1_delegates_create",
		Method:             "POST",
		PathPattern:        "/v1/delegates/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V1DelegatesCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1DelegatesCreateAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1_delegates_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	V1DelegatesDelete Delete every pair delegate/delegator found. Signature is built the same way as for adding a delegate,

but in this case the signer can be either the `delegator` (owner) or the `delegate` itself.
Check `POST /delegates/`
*/
func (a *Client) V1DelegatesDelete(params *V1DelegatesDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1DelegatesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1DelegatesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "v1_delegates_delete",
		Method:             "DELETE",
		PathPattern:        "/v1/delegates/{delegate_address}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V1DelegatesDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1DelegatesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1_delegates_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1DelegatesList Get list of delegates
*/
func (a *Client) V1DelegatesList(params *V1DelegatesListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1DelegatesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1DelegatesListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "v1_delegates_list",
		Method:             "GET",
		PathPattern:        "/v1/delegates/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V1DelegatesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1DelegatesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1_delegates_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	V2DelegatesCreate Create a delegate for a Safe address with a custom label. Calls with same delegate but different label or

signer will update the label or delegator if different.
An EOA is required to sign the following EIP712 data:

```python

	 {
	    "types": {
	        "EIP712Domain": [
	            {"name": "name", "type": "string"},
	            {"name": "version", "type": "string"},
	            {"name": "chainId", "type": "uint256"},
	        ],
	        "AddDelegate": [
	            {"name": "delegateAddress", "type": "bytes32"},
	            {"name": "totp", "type": "uint256"},
	        ],
	    },
	    "primaryType": "AddDelegate",
	    "domain": {
	        "name": "Safe Transaction Service",
	        "version": "1.0",
	        "chainId": chain_id,
	    },
	    "message": {
	        "delegateAddress": delegate_address,
	        "totp": totp,
	    },
	}

```

`totp` parameter is calculated with `T0=0` and `Tx=3600`. `totp` is calculated by taking the
Unix UTC epoch time (no milliseconds) and dividing by 3600 (natural division, no decimals)
*/
func (a *Client) V2DelegatesCreate(params *V2DelegatesCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V2DelegatesCreateAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2DelegatesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "v2_delegates_create",
		Method:             "POST",
		PathPattern:        "/v2/delegates/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2DelegatesCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V2DelegatesCreateAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v2_delegates_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	V2DelegatesDelete Removes all delegate/delegator pairs found or combinations of safe/delegate/delegator/delegate. The signature

is constructed in the same way as for adding a delegate, but in this case the signer can be either the
`delegator` (owner) or the `delegate` itself. Check `POST /delegates/`.
*/
func (a *Client) V2DelegatesDelete(params *V2DelegatesDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V2DelegatesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2DelegatesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "v2_delegates_delete",
		Method:             "DELETE",
		PathPattern:        "/v2/delegates/{delegate_address}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2DelegatesDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V2DelegatesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v2_delegates_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V2DelegatesList Get list of delegates
*/
func (a *Client) V2DelegatesList(params *V2DelegatesListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V2DelegatesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2DelegatesListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "v2_delegates_list",
		Method:             "GET",
		PathPattern:        "/v2/delegates/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2DelegatesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V2DelegatesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v2_delegates_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
