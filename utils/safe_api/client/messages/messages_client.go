// Code generated by go-swagger; DO NOT EDIT.

package messages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new messages API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new messages API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new messages API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for messages API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	V1MessagesRead(params *V1MessagesReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1MessagesReadOK, error)

	V1MessagesSignaturesCreate(params *V1MessagesSignaturesCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1MessagesSignaturesCreateCreated, error)

	V1SafesMessagesCreate(params *V1SafesMessagesCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1SafesMessagesCreateCreated, error)

	V1SafesMessagesList(params *V1SafesMessagesListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1SafesMessagesListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
V1MessagesRead v1 messages read API
*/
func (a *Client) V1MessagesRead(params *V1MessagesReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1MessagesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1MessagesReadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "v1_messages_read",
		Method:             "GET",
		PathPattern:        "/v1/messages/{message_hash}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V1MessagesReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1MessagesReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1_messages_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1MessagesSignaturesCreate v1 messages signatures create API
*/
func (a *Client) V1MessagesSignaturesCreate(params *V1MessagesSignaturesCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1MessagesSignaturesCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1MessagesSignaturesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "v1_messages_signatures_create",
		Method:             "POST",
		PathPattern:        "/v1/messages/{message_hash}/signatures/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V1MessagesSignaturesCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1MessagesSignaturesCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1_messages_signatures_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	V1SafesMessagesCreate Create a new signed message for a Safe. Message can be:

- A “string“, so “EIP191“ will be used to get the hash.
- An “EIP712“ “object“.

Hash will be calculated from the provided “message“. Sending a raw “hash“ will not be accepted,
service needs to derive it itself.
*/
func (a *Client) V1SafesMessagesCreate(params *V1SafesMessagesCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1SafesMessagesCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SafesMessagesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "v1_safes_messages_create",
		Method:             "POST",
		PathPattern:        "/v1/safes/{address}/messages/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V1SafesMessagesCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SafesMessagesCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1_safes_messages_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SafesMessagesList v1 safes messages list API
*/
func (a *Client) V1SafesMessagesList(params *V1SafesMessagesListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1SafesMessagesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SafesMessagesListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "v1_safes_messages_list",
		Method:             "GET",
		PathPattern:        "/v1/safes/{address}/messages/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V1SafesMessagesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SafesMessagesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1_safes_messages_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
