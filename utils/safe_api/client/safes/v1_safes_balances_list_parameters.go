// Code generated by go-swagger; DO NOT EDIT.

package safes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewV1SafesBalancesListParams creates a new V1SafesBalancesListParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewV1SafesBalancesListParams() *V1SafesBalancesListParams {
	return &V1SafesBalancesListParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewV1SafesBalancesListParamsWithTimeout creates a new V1SafesBalancesListParams object
// with the ability to set a timeout on a request.
func NewV1SafesBalancesListParamsWithTimeout(timeout time.Duration) *V1SafesBalancesListParams {
	return &V1SafesBalancesListParams{
		timeout: timeout,
	}
}

// NewV1SafesBalancesListParamsWithContext creates a new V1SafesBalancesListParams object
// with the ability to set a context for a request.
func NewV1SafesBalancesListParamsWithContext(ctx context.Context) *V1SafesBalancesListParams {
	return &V1SafesBalancesListParams{
		Context: ctx,
	}
}

// NewV1SafesBalancesListParamsWithHTTPClient creates a new V1SafesBalancesListParams object
// with the ability to set a custom HTTPClient for a request.
func NewV1SafesBalancesListParamsWithHTTPClient(client *http.Client) *V1SafesBalancesListParams {
	return &V1SafesBalancesListParams{
		HTTPClient: client,
	}
}

/*
V1SafesBalancesListParams contains all the parameters to send to the API endpoint

	for the v1 safes balances list operation.

	Typically these are written to a http.Request.
*/
type V1SafesBalancesListParams struct {

	// Address.
	Address string

	/* ExcludeSpam.

	   If `True` spam tokens will not be returned
	*/
	ExcludeSpam *bool

	/* Trusted.

	   If `True` just trusted tokens will be returned
	*/
	Trusted *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the v1 safes balances list params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *V1SafesBalancesListParams) WithDefaults() *V1SafesBalancesListParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the v1 safes balances list params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *V1SafesBalancesListParams) SetDefaults() {
	var (
		excludeSpamDefault = bool(false)

		trustedDefault = bool(false)
	)

	val := V1SafesBalancesListParams{
		ExcludeSpam: &excludeSpamDefault,
		Trusted:     &trustedDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the v1 safes balances list params
func (o *V1SafesBalancesListParams) WithTimeout(timeout time.Duration) *V1SafesBalancesListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the v1 safes balances list params
func (o *V1SafesBalancesListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the v1 safes balances list params
func (o *V1SafesBalancesListParams) WithContext(ctx context.Context) *V1SafesBalancesListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the v1 safes balances list params
func (o *V1SafesBalancesListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the v1 safes balances list params
func (o *V1SafesBalancesListParams) WithHTTPClient(client *http.Client) *V1SafesBalancesListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the v1 safes balances list params
func (o *V1SafesBalancesListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAddress adds the address to the v1 safes balances list params
func (o *V1SafesBalancesListParams) WithAddress(address string) *V1SafesBalancesListParams {
	o.SetAddress(address)
	return o
}

// SetAddress adds the address to the v1 safes balances list params
func (o *V1SafesBalancesListParams) SetAddress(address string) {
	o.Address = address
}

// WithExcludeSpam adds the excludeSpam to the v1 safes balances list params
func (o *V1SafesBalancesListParams) WithExcludeSpam(excludeSpam *bool) *V1SafesBalancesListParams {
	o.SetExcludeSpam(excludeSpam)
	return o
}

// SetExcludeSpam adds the excludeSpam to the v1 safes balances list params
func (o *V1SafesBalancesListParams) SetExcludeSpam(excludeSpam *bool) {
	o.ExcludeSpam = excludeSpam
}

// WithTrusted adds the trusted to the v1 safes balances list params
func (o *V1SafesBalancesListParams) WithTrusted(trusted *bool) *V1SafesBalancesListParams {
	o.SetTrusted(trusted)
	return o
}

// SetTrusted adds the trusted to the v1 safes balances list params
func (o *V1SafesBalancesListParams) SetTrusted(trusted *bool) {
	o.Trusted = trusted
}

// WriteToRequest writes these params to a swagger request
func (o *V1SafesBalancesListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param address
	if err := r.SetPathParam("address", o.Address); err != nil {
		return err
	}

	if o.ExcludeSpam != nil {

		// query param exclude_spam
		var qrExcludeSpam bool

		if o.ExcludeSpam != nil {
			qrExcludeSpam = *o.ExcludeSpam
		}
		qExcludeSpam := swag.FormatBool(qrExcludeSpam)
		if qExcludeSpam != "" {

			if err := r.SetQueryParam("exclude_spam", qExcludeSpam); err != nil {
				return err
			}
		}
	}

	if o.Trusted != nil {

		// query param trusted
		var qrTrusted bool

		if o.Trusted != nil {
			qrTrusted = *o.Trusted
		}
		qTrusted := swag.FormatBool(qrTrusted)
		if qTrusted != "" {

			if err := r.SetQueryParam("trusted", qTrusted); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
