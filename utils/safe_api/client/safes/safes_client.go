// Code generated by go-swagger; DO NOT EDIT.

package safes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new safes API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new safes API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new safes API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for safes API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	V1SafesBalancesList(params *V1SafesBalancesListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1SafesBalancesListOK, error)

	V1SafesCreationList(params *V1SafesCreationListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1SafesCreationListOK, error)

	V1SafesDelegatesDelete(params *V1SafesDelegatesDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1SafesDelegatesDeleteNoContent, error)

	V1SafesRead(params *V1SafesReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1SafesReadOK, error)

	V2SafesCollectiblesList(params *V2SafesCollectiblesListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V2SafesCollectiblesListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
V1SafesBalancesList Get balance for Ether and ERC20 tokens
*/
func (a *Client) V1SafesBalancesList(params *V1SafesBalancesListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1SafesBalancesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SafesBalancesListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "v1_safes_balances_list",
		Method:             "GET",
		PathPattern:        "/v1/safes/{address}/balances/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V1SafesBalancesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SafesBalancesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1_safes_balances_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SafesCreationList Get status of the safe
*/
func (a *Client) V1SafesCreationList(params *V1SafesCreationListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1SafesCreationListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SafesCreationListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "v1_safes_creation_list",
		Method:             "GET",
		PathPattern:        "/v1/safes/{address}/creation/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V1SafesCreationListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SafesCreationListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1_safes_creation_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	V1SafesDelegatesDelete Delete a delegate for a Safe. Signature is built the same way that for adding a delegate.

Check `POST /delegates/`
*/
func (a *Client) V1SafesDelegatesDelete(params *V1SafesDelegatesDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1SafesDelegatesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SafesDelegatesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "v1_safes_delegates_delete",
		Method:             "DELETE",
		PathPattern:        "/v1/safes/{address}/delegates/{delegate_address}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V1SafesDelegatesDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SafesDelegatesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1_safes_delegates_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SafesRead Get status of the safe
*/
func (a *Client) V1SafesRead(params *V1SafesReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1SafesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SafesReadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "v1_safes_read",
		Method:             "GET",
		PathPattern:        "/v1/safes/{address}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V1SafesReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SafesReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1_safes_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V2SafesCollectiblesList Get collectibles (ERC721 tokens) and information about them
*/
func (a *Client) V2SafesCollectiblesList(params *V2SafesCollectiblesListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V2SafesCollectiblesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2SafesCollectiblesListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "v2_safes_collectibles_list",
		Method:             "GET",
		PathPattern:        "/v2/safes/{address}/collectibles/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2SafesCollectiblesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V2SafesCollectiblesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v2_safes_collectibles_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
