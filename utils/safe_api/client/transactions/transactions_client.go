// Code generated by go-swagger; DO NOT EDIT.

package transactions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"github.com/pkg/errors"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new transactions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new transactions API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new transactions API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for transactions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	V1ModuleTransactionRead(params *V1ModuleTransactionReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1ModuleTransactionReadOK, error)

	V1MultisigTransactionsConfirmationsCreate(params *V1MultisigTransactionsConfirmationsCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1MultisigTransactionsConfirmationsCreateCreated, error)

	V1MultisigTransactionsConfirmationsList(params *V1MultisigTransactionsConfirmationsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1MultisigTransactionsConfirmationsListOK, error)

	V1MultisigTransactionsDelete(params *V1MultisigTransactionsDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1MultisigTransactionsDeleteNoContent, error)

	V1MultisigTransactionsRead(params *V1MultisigTransactionsReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1MultisigTransactionsReadOK, error)

	V1SafesAllTransactionsList(params *V1SafesAllTransactionsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1SafesAllTransactionsListOK, error)

	V1SafesIncomingTransfersList(params *V1SafesIncomingTransfersListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1SafesIncomingTransfersListOK, error)

	V1SafesModuleTransactionsList(params *V1SafesModuleTransactionsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1SafesModuleTransactionsListOK, error)

	V1SafesMultisigTransactionsCreate(params *V1SafesMultisigTransactionsCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1SafesMultisigTransactionsCreateCreated, error)

	V1SafesMultisigTransactionsEstimationsCreate(params *V1SafesMultisigTransactionsEstimationsCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1SafesMultisigTransactionsEstimationsCreateOK, error)

	V1SafesMultisigTransactionsList(params *V1SafesMultisigTransactionsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1SafesMultisigTransactionsListOK, error)

	V1SafesTransfersList(params *V1SafesTransfersListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1SafesTransfersListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
V1ModuleTransactionRead :return: module transaction filtered by module_transaction_id
*/
func (a *Client) V1ModuleTransactionRead(params *V1ModuleTransactionReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1ModuleTransactionReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ModuleTransactionReadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "v1_module-transaction_read",
		Method:             "GET",
		PathPattern:        "/v1/module-transaction/{module_transaction_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V1ModuleTransactionReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ModuleTransactionReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1_module-transaction_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	V1MultisigTransactionsConfirmationsCreate Add a confirmation for a transaction. More than one signature can be used. This endpoint does not support

the use of delegates to make a transaction trusted.
*/
func (a *Client) V1MultisigTransactionsConfirmationsCreate(params *V1MultisigTransactionsConfirmationsCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1MultisigTransactionsConfirmationsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1MultisigTransactionsConfirmationsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "v1_multisig-transactions_confirmations_create",
		Method:             "POST",
		PathPattern:        "/v1/multisig-transactions/{safe_tx_hash}/confirmations/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V1MultisigTransactionsConfirmationsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1MultisigTransactionsConfirmationsCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1_multisig-transactions_confirmations_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1MultisigTransactionsConfirmationsList Get the list of confirmations for a multisig transaction
*/
func (a *Client) V1MultisigTransactionsConfirmationsList(params *V1MultisigTransactionsConfirmationsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1MultisigTransactionsConfirmationsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1MultisigTransactionsConfirmationsListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "v1_multisig-transactions_confirmations_list",
		Method:             "GET",
		PathPattern:        "/v1/multisig-transactions/{safe_tx_hash}/confirmations/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V1MultisigTransactionsConfirmationsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1MultisigTransactionsConfirmationsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1_multisig-transactions_confirmations_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	V1MultisigTransactionsDelete Delete a queued but not executed multisig transaction. Only the proposer can delete the transaction.

Delegates are not valid, if the transaction was proposed by a delegator the owner who delegated to
the delegate must be used.
An EOA is required to sign the following EIP712 data:

```python

	 {
	    "types": {
	        "EIP712Domain": [
	            {"name": "name", "type": "string"},
	            {"name": "version", "type": "string"},
	            {"name": "chainId", "type": "uint256"},
	            {"name": "verifyingContract", "type": "address"},
	        ],
	        "DeleteRequest": [
	            {"name": "safeTxHash", "type": "bytes32"},
	            {"name": "totp", "type": "uint256"},
	        ],
	    },
	    "primaryType": "DeleteRequest",
	    "domain": {
	        "name": "Safe Transaction Service",
	        "version": "1.0",
	        "chainId": chain_id,
	        "verifyingContract": safe_address,
	    },
	    "message": {
	        "safeTxHash": safe_tx_hash,
	        "totp": totp,
	    },
	}

```

`totp` parameter is calculated with `T0=0` and `Tx=3600`. `totp` is calculated by taking the
Unix UTC epoch time (no milliseconds) and dividing by 3600 (natural division, no decimals)
*/
func (a *Client) V1MultisigTransactionsDelete(params *V1MultisigTransactionsDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1MultisigTransactionsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1MultisigTransactionsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "v1_multisig-transactions_delete",
		Method:             "DELETE",
		PathPattern:        "/v1/multisig-transactions/{safe_tx_hash}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V1MultisigTransactionsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1MultisigTransactionsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1_multisig-transactions_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1MultisigTransactionsRead v1 multisig transactions read API
*/
func (a *Client) V1MultisigTransactionsRead(params *V1MultisigTransactionsReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1MultisigTransactionsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1MultisigTransactionsReadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "v1_multisig-transactions_read",
		Method:             "GET",
		PathPattern:        "/v1/multisig-transactions/{safe_tx_hash}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V1MultisigTransactionsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1MultisigTransactionsReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1_multisig-transactions_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SafesAllTransactionsList v1 safes all transactions list API
*/
func (a *Client) V1SafesAllTransactionsList(params *V1SafesAllTransactionsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1SafesAllTransactionsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SafesAllTransactionsListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "v1_safes_all-transactions_list",
		Method:             "GET",
		PathPattern:        "/v1/safes/{address}/all-transactions/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V1SafesAllTransactionsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SafesAllTransactionsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1_safes_all-transactions_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SafesIncomingTransfersList v1 safes incoming transfers list API
*/
func (a *Client) V1SafesIncomingTransfersList(params *V1SafesIncomingTransfersListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1SafesIncomingTransfersListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SafesIncomingTransfersListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "v1_safes_incoming-transfers_list",
		Method:             "GET",
		PathPattern:        "/v1/safes/{address}/incoming-transfers/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V1SafesIncomingTransfersListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SafesIncomingTransfersListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1_safes_incoming-transfers_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SafesModuleTransactionsList Returns the module transaction of a Safe
*/
func (a *Client) V1SafesModuleTransactionsList(params *V1SafesModuleTransactionsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1SafesModuleTransactionsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SafesModuleTransactionsListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "v1_safes_module-transactions_list",
		Method:             "GET",
		PathPattern:        "/v1/safes/{address}/module-transactions/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V1SafesModuleTransactionsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SafesModuleTransactionsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1_safes_module-transactions_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SafesMultisigTransactionsCreate Creates a Multisig Transaction with its confirmations and retrieves all the information related.
*/
func (a *Client) V1SafesMultisigTransactionsCreate(params *V1SafesMultisigTransactionsCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1SafesMultisigTransactionsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SafesMultisigTransactionsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "v1_safes_multisig-transactions_create",
		Method:             "POST",
		PathPattern:        "/v1/safes/{address}/multisig-transactions/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V1SafesMultisigTransactionsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SafesMultisigTransactionsCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1_safes_multisig-transactions_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SafesMultisigTransactionsEstimationsCreate Estimates `safeTxGas` for a Safe Multisig Transaction.
*/
func (a *Client) V1SafesMultisigTransactionsEstimationsCreate(params *V1SafesMultisigTransactionsEstimationsCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1SafesMultisigTransactionsEstimationsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SafesMultisigTransactionsEstimationsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "v1_safes_multisig-transactions_estimations_create",
		Method:             "POST",
		PathPattern:        "/v1/safes/{address}/multisig-transactions/estimations/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V1SafesMultisigTransactionsEstimationsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, errors.Wrap(err, "unable to submit request")
	}
	success, ok := result.(*V1SafesMultisigTransactionsEstimationsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1_safes_multisig-transactions_estimations_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	V1SafesMultisigTransactionsList Returns a paginated list of Multisig Transactions for a Safe.

By default only “trusted“ multisig transactions are returned.
*/
func (a *Client) V1SafesMultisigTransactionsList(params *V1SafesMultisigTransactionsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1SafesMultisigTransactionsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SafesMultisigTransactionsListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "v1_safes_multisig-transactions_list",
		Method:             "GET",
		PathPattern:        "/v1/safes/{address}/multisig-transactions/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V1SafesMultisigTransactionsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SafesMultisigTransactionsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1_safes_multisig-transactions_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SafesTransfersList v1 safes transfers list API
*/
func (a *Client) V1SafesTransfersList(params *V1SafesTransfersListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1SafesTransfersListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SafesTransfersListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "v1_safes_transfers_list",
		Method:             "GET",
		PathPattern:        "/v1/safes/{address}/transfers/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V1SafesTransfersListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SafesTransfersListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1_safes_transfers_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
