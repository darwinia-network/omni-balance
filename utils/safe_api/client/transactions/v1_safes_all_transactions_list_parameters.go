// Code generated by go-swagger; DO NOT EDIT.

package transactions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewV1SafesAllTransactionsListParams creates a new V1SafesAllTransactionsListParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewV1SafesAllTransactionsListParams() *V1SafesAllTransactionsListParams {
	return &V1SafesAllTransactionsListParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewV1SafesAllTransactionsListParamsWithTimeout creates a new V1SafesAllTransactionsListParams object
// with the ability to set a timeout on a request.
func NewV1SafesAllTransactionsListParamsWithTimeout(timeout time.Duration) *V1SafesAllTransactionsListParams {
	return &V1SafesAllTransactionsListParams{
		timeout: timeout,
	}
}

// NewV1SafesAllTransactionsListParamsWithContext creates a new V1SafesAllTransactionsListParams object
// with the ability to set a context for a request.
func NewV1SafesAllTransactionsListParamsWithContext(ctx context.Context) *V1SafesAllTransactionsListParams {
	return &V1SafesAllTransactionsListParams{
		Context: ctx,
	}
}

// NewV1SafesAllTransactionsListParamsWithHTTPClient creates a new V1SafesAllTransactionsListParams object
// with the ability to set a custom HTTPClient for a request.
func NewV1SafesAllTransactionsListParamsWithHTTPClient(client *http.Client) *V1SafesAllTransactionsListParams {
	return &V1SafesAllTransactionsListParams{
		HTTPClient: client,
	}
}

/*
V1SafesAllTransactionsListParams contains all the parameters to send to the API endpoint

	for the v1 safes all transactions list operation.

	Typically these are written to a http.Request.
*/
type V1SafesAllTransactionsListParams struct {

	// Address.
	Address string

	/* Executed.

	   If `True` only executed transactions are returned
	*/
	Executed *bool

	/* Limit.

	   Number of results to return per page.
	*/
	Limit *int64

	/* Offset.

	   The initial index from which to return the results.
	*/
	Offset *int64

	/* Ordering.

	   Which field to use when ordering the results.
	*/
	Ordering *string

	/* Queued.

	   If `True` transactions with `nonce >= Safe current nonce` are also returned

	   Default: true
	*/
	Queued *bool

	/* Trusted.

	   If `True` just trusted transactions are shown (indexed, added by a delegate or with at least one confirmation)

	   Default: true
	*/
	Trusted *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the v1 safes all transactions list params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *V1SafesAllTransactionsListParams) WithDefaults() *V1SafesAllTransactionsListParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the v1 safes all transactions list params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *V1SafesAllTransactionsListParams) SetDefaults() {
	var (
		executedDefault = bool(false)

		queuedDefault = bool(true)

		trustedDefault = bool(true)
	)

	val := V1SafesAllTransactionsListParams{
		Executed: &executedDefault,
		Queued:   &queuedDefault,
		Trusted:  &trustedDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the v1 safes all transactions list params
func (o *V1SafesAllTransactionsListParams) WithTimeout(timeout time.Duration) *V1SafesAllTransactionsListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the v1 safes all transactions list params
func (o *V1SafesAllTransactionsListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the v1 safes all transactions list params
func (o *V1SafesAllTransactionsListParams) WithContext(ctx context.Context) *V1SafesAllTransactionsListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the v1 safes all transactions list params
func (o *V1SafesAllTransactionsListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the v1 safes all transactions list params
func (o *V1SafesAllTransactionsListParams) WithHTTPClient(client *http.Client) *V1SafesAllTransactionsListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the v1 safes all transactions list params
func (o *V1SafesAllTransactionsListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAddress adds the address to the v1 safes all transactions list params
func (o *V1SafesAllTransactionsListParams) WithAddress(address string) *V1SafesAllTransactionsListParams {
	o.SetAddress(address)
	return o
}

// SetAddress adds the address to the v1 safes all transactions list params
func (o *V1SafesAllTransactionsListParams) SetAddress(address string) {
	o.Address = address
}

// WithExecuted adds the executed to the v1 safes all transactions list params
func (o *V1SafesAllTransactionsListParams) WithExecuted(executed *bool) *V1SafesAllTransactionsListParams {
	o.SetExecuted(executed)
	return o
}

// SetExecuted adds the executed to the v1 safes all transactions list params
func (o *V1SafesAllTransactionsListParams) SetExecuted(executed *bool) {
	o.Executed = executed
}

// WithLimit adds the limit to the v1 safes all transactions list params
func (o *V1SafesAllTransactionsListParams) WithLimit(limit *int64) *V1SafesAllTransactionsListParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the v1 safes all transactions list params
func (o *V1SafesAllTransactionsListParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the v1 safes all transactions list params
func (o *V1SafesAllTransactionsListParams) WithOffset(offset *int64) *V1SafesAllTransactionsListParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the v1 safes all transactions list params
func (o *V1SafesAllTransactionsListParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithOrdering adds the ordering to the v1 safes all transactions list params
func (o *V1SafesAllTransactionsListParams) WithOrdering(ordering *string) *V1SafesAllTransactionsListParams {
	o.SetOrdering(ordering)
	return o
}

// SetOrdering adds the ordering to the v1 safes all transactions list params
func (o *V1SafesAllTransactionsListParams) SetOrdering(ordering *string) {
	o.Ordering = ordering
}

// WithQueued adds the queued to the v1 safes all transactions list params
func (o *V1SafesAllTransactionsListParams) WithQueued(queued *bool) *V1SafesAllTransactionsListParams {
	o.SetQueued(queued)
	return o
}

// SetQueued adds the queued to the v1 safes all transactions list params
func (o *V1SafesAllTransactionsListParams) SetQueued(queued *bool) {
	o.Queued = queued
}

// WithTrusted adds the trusted to the v1 safes all transactions list params
func (o *V1SafesAllTransactionsListParams) WithTrusted(trusted *bool) *V1SafesAllTransactionsListParams {
	o.SetTrusted(trusted)
	return o
}

// SetTrusted adds the trusted to the v1 safes all transactions list params
func (o *V1SafesAllTransactionsListParams) SetTrusted(trusted *bool) {
	o.Trusted = trusted
}

// WriteToRequest writes these params to a swagger request
func (o *V1SafesAllTransactionsListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param address
	if err := r.SetPathParam("address", o.Address); err != nil {
		return err
	}

	if o.Executed != nil {

		// query param executed
		var qrExecuted bool

		if o.Executed != nil {
			qrExecuted = *o.Executed
		}
		qExecuted := swag.FormatBool(qrExecuted)
		if qExecuted != "" {

			if err := r.SetQueryParam("executed", qExecuted); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.Ordering != nil {

		// query param ordering
		var qrOrdering string

		if o.Ordering != nil {
			qrOrdering = *o.Ordering
		}
		qOrdering := qrOrdering
		if qOrdering != "" {

			if err := r.SetQueryParam("ordering", qOrdering); err != nil {
				return err
			}
		}
	}

	if o.Queued != nil {

		// query param queued
		var qrQueued bool

		if o.Queued != nil {
			qrQueued = *o.Queued
		}
		qQueued := swag.FormatBool(qrQueued)
		if qQueued != "" {

			if err := r.SetQueryParam("queued", qQueued); err != nil {
				return err
			}
		}
	}

	if o.Trusted != nil {

		// query param trusted
		var qrTrusted bool

		if o.Trusted != nil {
			qrTrusted = *o.Trusted
		}
		qTrusted := swag.FormatBool(qrTrusted)
		if qTrusted != "" {

			if err := r.SetQueryParam("trusted", qTrusted); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
