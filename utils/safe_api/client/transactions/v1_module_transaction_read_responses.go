// Code generated by go-swagger; DO NOT EDIT.

package transactions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	models "omni-balance/utils/safe_api"
)

// V1ModuleTransactionReadReader is a Reader for the V1ModuleTransactionRead structure.
type V1ModuleTransactionReadReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *V1ModuleTransactionReadReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewV1ModuleTransactionReadOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewV1ModuleTransactionReadBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewV1ModuleTransactionReadNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/module-transaction/{module_transaction_id}] v1_module-transaction_read", response, response.Code())
	}
}

// NewV1ModuleTransactionReadOK creates a V1ModuleTransactionReadOK with default headers values
func NewV1ModuleTransactionReadOK() *V1ModuleTransactionReadOK {
	return &V1ModuleTransactionReadOK{}
}

/*
V1ModuleTransactionReadOK describes a response with status code 200, with default header values.

V1ModuleTransactionReadOK v1 module transaction read o k
*/
type V1ModuleTransactionReadOK struct {
	Payload *models.SafeModuleTransactionResponse
}

// IsSuccess returns true when this v1 module transaction read o k response has a 2xx status code
func (o *V1ModuleTransactionReadOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this v1 module transaction read o k response has a 3xx status code
func (o *V1ModuleTransactionReadOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 module transaction read o k response has a 4xx status code
func (o *V1ModuleTransactionReadOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 module transaction read o k response has a 5xx status code
func (o *V1ModuleTransactionReadOK) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 module transaction read o k response a status code equal to that given
func (o *V1ModuleTransactionReadOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the v1 module transaction read o k response
func (o *V1ModuleTransactionReadOK) Code() int {
	return 200
}

func (o *V1ModuleTransactionReadOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/module-transaction/{module_transaction_id}][%d] v1ModuleTransactionReadOK %s", 200, payload)
}

func (o *V1ModuleTransactionReadOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/module-transaction/{module_transaction_id}][%d] v1ModuleTransactionReadOK %s", 200, payload)
}

func (o *V1ModuleTransactionReadOK) GetPayload() *models.SafeModuleTransactionResponse {
	return o.Payload
}

func (o *V1ModuleTransactionReadOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SafeModuleTransactionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1ModuleTransactionReadBadRequest creates a V1ModuleTransactionReadBadRequest with default headers values
func NewV1ModuleTransactionReadBadRequest() *V1ModuleTransactionReadBadRequest {
	return &V1ModuleTransactionReadBadRequest{}
}

/*
V1ModuleTransactionReadBadRequest describes a response with status code 400, with default header values.

Invalid moduleTransactionId
*/
type V1ModuleTransactionReadBadRequest struct {
}

// IsSuccess returns true when this v1 module transaction read bad request response has a 2xx status code
func (o *V1ModuleTransactionReadBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 module transaction read bad request response has a 3xx status code
func (o *V1ModuleTransactionReadBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 module transaction read bad request response has a 4xx status code
func (o *V1ModuleTransactionReadBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 module transaction read bad request response has a 5xx status code
func (o *V1ModuleTransactionReadBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 module transaction read bad request response a status code equal to that given
func (o *V1ModuleTransactionReadBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the v1 module transaction read bad request response
func (o *V1ModuleTransactionReadBadRequest) Code() int {
	return 400
}

func (o *V1ModuleTransactionReadBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/module-transaction/{module_transaction_id}][%d] v1ModuleTransactionReadBadRequest", 400)
}

func (o *V1ModuleTransactionReadBadRequest) String() string {
	return fmt.Sprintf("[GET /v1/module-transaction/{module_transaction_id}][%d] v1ModuleTransactionReadBadRequest", 400)
}

func (o *V1ModuleTransactionReadBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewV1ModuleTransactionReadNotFound creates a V1ModuleTransactionReadNotFound with default headers values
func NewV1ModuleTransactionReadNotFound() *V1ModuleTransactionReadNotFound {
	return &V1ModuleTransactionReadNotFound{}
}

/*
V1ModuleTransactionReadNotFound describes a response with status code 404, with default header values.

ModuleTransaction does not exist
*/
type V1ModuleTransactionReadNotFound struct {
}

// IsSuccess returns true when this v1 module transaction read not found response has a 2xx status code
func (o *V1ModuleTransactionReadNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 module transaction read not found response has a 3xx status code
func (o *V1ModuleTransactionReadNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 module transaction read not found response has a 4xx status code
func (o *V1ModuleTransactionReadNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 module transaction read not found response has a 5xx status code
func (o *V1ModuleTransactionReadNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 module transaction read not found response a status code equal to that given
func (o *V1ModuleTransactionReadNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the v1 module transaction read not found response
func (o *V1ModuleTransactionReadNotFound) Code() int {
	return 404
}

func (o *V1ModuleTransactionReadNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/module-transaction/{module_transaction_id}][%d] v1ModuleTransactionReadNotFound", 404)
}

func (o *V1ModuleTransactionReadNotFound) String() string {
	return fmt.Sprintf("[GET /v1/module-transaction/{module_transaction_id}][%d] v1ModuleTransactionReadNotFound", 404)
}

func (o *V1ModuleTransactionReadNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
