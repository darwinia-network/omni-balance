// Code generated by go-swagger; DO NOT EDIT.

package safe_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IndexingStatus indexing status
//
// swagger:model IndexingStatus
type IndexingStatus struct {

	// Current block number
	// Required: true
	CurrentBlockNumber *int64 `json:"currentBlockNumber"`

	// Erc20 block number
	// Required: true
	Erc20BlockNumber *int64 `json:"erc20BlockNumber"`

	// Erc20 synced
	// Required: true
	Erc20Synced *bool `json:"erc20Synced"`

	// Master copies block number
	// Required: true
	MasterCopiesBlockNumber *int64 `json:"masterCopiesBlockNumber"`

	// Master copies synced
	// Required: true
	MasterCopiesSynced *bool `json:"masterCopiesSynced"`

	// Synced
	// Required: true
	Synced *bool `json:"synced"`
}

// Validate validates this indexing status
func (m *IndexingStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrentBlockNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErc20BlockNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErc20Synced(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMasterCopiesBlockNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMasterCopiesSynced(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSynced(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IndexingStatus) validateCurrentBlockNumber(formats strfmt.Registry) error {

	if err := validate.Required("currentBlockNumber", "body", m.CurrentBlockNumber); err != nil {
		return err
	}

	return nil
}

func (m *IndexingStatus) validateErc20BlockNumber(formats strfmt.Registry) error {

	if err := validate.Required("erc20BlockNumber", "body", m.Erc20BlockNumber); err != nil {
		return err
	}

	return nil
}

func (m *IndexingStatus) validateErc20Synced(formats strfmt.Registry) error {

	if err := validate.Required("erc20Synced", "body", m.Erc20Synced); err != nil {
		return err
	}

	return nil
}

func (m *IndexingStatus) validateMasterCopiesBlockNumber(formats strfmt.Registry) error {

	if err := validate.Required("masterCopiesBlockNumber", "body", m.MasterCopiesBlockNumber); err != nil {
		return err
	}

	return nil
}

func (m *IndexingStatus) validateMasterCopiesSynced(formats strfmt.Registry) error {

	if err := validate.Required("masterCopiesSynced", "body", m.MasterCopiesSynced); err != nil {
		return err
	}

	return nil
}

func (m *IndexingStatus) validateSynced(formats strfmt.Registry) error {

	if err := validate.Required("synced", "body", m.Synced); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this indexing status based on context it is used
func (m *IndexingStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IndexingStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IndexingStatus) UnmarshalBinary(b []byte) error {
	var res IndexingStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
