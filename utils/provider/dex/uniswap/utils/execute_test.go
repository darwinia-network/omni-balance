package utils

import (
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/math"
	"github.com/shopspring/decimal"
	"github.com/stretchr/testify/assert"
	"github.com/uniswapv3-go/uniswapv3-universal-router-decoder-go/command"
	"math/big"
	"omni-balance/utils/constant"
	"omni-balance/utils/wallets"
	"testing"
)

func TestExecute_BuildV3SwapExactInParams(t *testing.T) {
	type fields struct {
		commands []command.Command
	}
	type args struct {
		recipient            common.Address
		tokenInAmountWei     *big.Int
		tokenOutMinAmountWei *big.Int
		path                 Paths
		isSenderFromPermit2  bool
	}
	tests := []struct {
		name    string
		fields  fields
		args    args
		want    string
		wantErr bool
	}{
		{
			name:   "test1",
			fields: fields{},
			args: args{
				recipient:            common.HexToAddress("0x0000000000000000000000000000000000000002"),
				tokenInAmountWei:     big.NewInt(28000000000000000),
				tokenOutMinAmountWei: big.NewInt(85696421),
				path: Paths{
					{
						TokenIn:  common.HexToAddress("0x82af49447d8a07e3bd95bd0d56f35241523fbab1"),
						Fee:      500,
						TokenOut: common.HexToAddress("0xfd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9"),
					},
				},
				isSenderFromPermit2: false,
			},

			want:    "3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000006647713d000000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000006379da05b6000000000000000000000000000000000000000000000000000000000000051b9fa500000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002b82af49447d8a07e3bd95bd0d56f35241523fbab10001f4fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9000000000000000000000000000000000000000000",
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			e := &Execute{
				commands: tt.fields.commands,
			}
			e = e.V3SwapExactIn(tt.args.recipient, tt.args.tokenInAmountWei, tt.args.tokenOutMinAmountWei, tt.args.path, tt.args.isSenderFromPermit2, true)
			got, err := e.Build(big.NewInt(1715958077))
			if (err != nil) != tt.wantErr {
				t.Errorf("V3SwapExactIn() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			assert.Equal(t, tt.want, common.Bytes2Hex(got))
		})
	}
}

func TestExecute_Build(t *testing.T) {
	var (
		// https://arbiscan.io/tx/0x14bfc7289c16e4b1075a6bc6814b4b69042dd4d69b984525ca7a58af30954853
		want = "3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000066483eed00000000000000000000000000000000000000000000000000000000000000050a00000604000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000340000000000000000000000000000000000000000000000000000000000000048000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000160000000000000000000000000912ce59144191c1204e64559fe8253a0e49e6548000000000000000000000000ffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000666fcabe00000000000000000000000000000000000000000000000000000000000000000000000000000000000000005e325eda8064b456f4781070c0738d849c82425800000000000000000000000000000000000000000000000000000000664844c600000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000004132f5e06e6caa8d92713f346579eecd6fe4c716cc8024ba8d19d7497b7cc20972707b31289642b5f86c42d707e11bf33b7cc8d7897f3d344fecd113d1ea673c0b1c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000020cc1b7615165a9bf0000000000000000000000000000000000000000000000000000000002493cbd100000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002b912ce59144191c1204e64559fe8253a0e49e65480001f4af88d065e77c8cc2239327c5edb3a432268e58310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000aeeb3d20707738950000000000000000000000000000000000000000000000000000000000c3071a600000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000042912ce59144191c1204e64559fe8253a0e49e65480001f482af49447d8a07e3bd95bd0d56f35241523fbab10001f4af88d065e77c8cc2239327c5edb3a432268e58310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e58310000000000000000000000007ffc3dbf3b2b50ff3a1d5523bc24bb5043837b1400000000000000000000000000000000000000000000000000000000000000190000000000000000000000000000000000000000000000000000000000000060000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e583100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000030c43d78"
	)
	wallet := wallets.NewWallets(wallets.WalletConfig{
		PrivateKey: constant.TestPrivateKey,
		Address:    common.HexToAddress(constant.TestWalletAddress),
	})
	e := new(Execute)
	inputData, err := e.Permit2Permit(
		PermitSingle{
			SigDeadline: big.NewInt(1716012230),
			Details: PermitDetails{
				Token:      common.HexToAddress("0x912ce59144191c1204e64559fe8253a0e49e6548"),
				Amount:     decimal.RequireFromString("1461501637330902918203684832716283019655932542975").BigInt(),
				Expiration: big.NewInt(1718602430),
				Nonce:      big.NewInt(0),
			},
			Spender:           common.HexToAddress("0x5E325eDA8064b456f4781070C0738d849c824258"),
			VerifyingContract: common.HexToAddress("0x0000000000000000000000000000000000000002"),
			ChainId:           math.NewHexOrDecimal256(1),
		},
		wallet.SignRawMessage,
	).V3SwapExactIn(
		common.HexToAddress("0x0000000000000000000000000000000000000002"),
		decimal.RequireFromString("605003289199755566064").BigInt(),
		decimal.RequireFromString("613665745").BigInt(),
		Paths{
			{
				Fee:      500,
				TokenIn:  common.HexToAddress("0x912CE59144191C1204E64559FE8253a0e49E6548"),
				TokenOut: common.HexToAddress("0xaf88d065e77c8cC2239327C5EDb3A432268e5831"),
			},
		}, true,
	).V3SwapExactIn(
		common.HexToAddress("0x0000000000000000000000000000000000000002"),
		decimal.RequireFromString("201667763066585188688").BigInt(),
		decimal.RequireFromString("204501414").BigInt(),
		Paths{
			{
				Fee:      500,
				TokenIn:  common.HexToAddress("0x912CE59144191C1204E64559FE8253a0e49E6548"),
				TokenOut: common.HexToAddress("0x82aF49447D8a07e3bd95BD0d56f35241523fBab1"),
			},
			{
				Fee:      500,
				TokenIn:  common.HexToAddress("0x82aF49447D8a07e3bd95BD0d56f35241523fBab1"),
				TokenOut: common.HexToAddress("0xaf88d065e77c8cC2239327C5EDb3A432268e5831"),
			},
		}, true,
	).PayPortion(
		common.HexToAddress("0xaf88d065e77c8cC2239327C5EDb3A432268e5831"),
		common.HexToAddress("0x7FFC3DBF3B2b50Ff3A1D5523bc24Bb5043837B14"),
		decimal.RequireFromString("25").BigInt(), false,
	).Sweep(
		common.HexToAddress("0xaf88d065e77c8cC2239327C5EDb3A432268e5831"),
		common.HexToAddress("0x0000000000000000000000000000000000000001"),
		decimal.RequireFromString("818167160").BigInt(), false,
	).Build(
		big.NewInt(1716010733),
	)
	assert.NoError(t, err)
	assert.Equal(t, want, common.Bytes2Hex(inputData))
}

func TestPaths_ToBytes(t *testing.T) {
	type args struct {
		fnName byte
	}
	tests := []struct {
		name string
		p    Paths
		args args
		want []byte
	}{
		{
			name: "V3_SWAP_EXACT_IN",
			p: Paths{
				{
					Fee:      500,
					TokenIn:  common.HexToAddress("0x3E29793C9BdEB6ce5A84C2BEceD91AD50c530b16"),
					TokenOut: common.HexToAddress("0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"),
				},
			},
			args: args{
				fnName: command.V3_SWAP_EXACT_IN,
			},
			want: common.Hex2Bytes("3E29793C9BdEB6ce5A84C2BEceD91AD50c530b160001f4C02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"),
		},
		{
			name: "V3_SWAP_EXACT_OUT",
			p: Paths{
				{
					Fee:      500,
					TokenIn:  common.HexToAddress("0x3E29793C9BdEB6ce5A84C2BEceD91AD50c530b16"),
					TokenOut: common.HexToAddress("0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"),
				},
			},
			args: args{
				fnName: command.V3_SWAP_EXACT_OUT,
			},
			want: common.Hex2Bytes("C02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc20001f43E29793C9BdEB6ce5A84C2BEceD91AD50c530b16"),
		},
		{
			name: "V3_SWAP_EXACT_OUT",
			p: Paths{
				{
					Fee:      500,
					TokenIn:  common.HexToAddress("0x3E29793C9BdEB6ce5A84C2BEceD91AD50c530b16"),
					TokenOut: common.HexToAddress("0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"),
				},
				{
					Fee:      300,
					TokenIn:  common.HexToAddress("0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"),
					TokenOut: common.HexToAddress("0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc4"),
				},
			},
			args: args{
				fnName: command.V3_SWAP_EXACT_OUT,
			},
			want: common.Hex2Bytes("C02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc400012cC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc20001f43E29793C9BdEB6ce5A84C2BEceD91AD50c530b16"),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			assert.Equalf(t, common.Bytes2Hex(tt.want), common.Bytes2Hex(tt.p.ToBytes(tt.args.fnName)), "ToBytes(%v)", tt.args.fnName)
		})
	}
}
