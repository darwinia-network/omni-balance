package helix

import (
	"context"
	"github.com/ethereum/go-ethereum/common"
	"github.com/shopspring/decimal"
	"github.com/stretchr/testify/assert"
	"math/big"
	"testing"
)

func TestV3_Do(t *testing.T) {
	conf.Init()
	args := []struct {
		name            string
		expectedData    string
		sourceChain     string
		targetChain     string
		amount          decimal.Decimal
		tokenName       string
		recipient       common.Address
		sender          common.Address
		relayer         common.Address
		transferId      common.Hash
		withdrawNonce   uint64
		DepositedMargin decimal.Decimal
		totalFee        decimal.Decimal
		to              common.Address
		timestamp       int64
		Value           *big.Int
	}{
		{
			name:         "arbitrum->USDT->op",
			expectedData: "9cd13471000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000003b9e571adecb0c277486036d6097e9c2cccfa9d9000000000000000000000000fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb900000000000000000000000094b008aa00579c1307b0ef2c499ad98a8ce58e580000000000000000000000000000000000000000000000000000000000061a800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000178d8546c5f78e01133858958355b06ec3406a1a00000000000000000000000000000000000000000000000000000000664434b9",
			sourceChain:  "arbitrum",
			targetChain:  "op",
			amount:       decimal.New(0, 0),
			tokenName:    "USDT",
			recipient:    common.HexToAddress("0x178D8546C5f78e01133858958355B06EC3406A1A"),
			sender:       common.HexToAddress("0x178D8546C5f78e01133858958355B06EC3406A1A"),
			relayer:      common.HexToAddress("0x3b9e571adecb0c277486036d6097e9c2cccfa9d9"),
			transferId:   common.HexToHash(""),
			totalFee:     decimal.RequireFromString("400000"),
			to:           common.HexToAddress("0xbA5D580B18b6436411562981e02c8A9aA1776D10"),
			timestamp:    1715745977,
		},
		{
			name:         "arbitrum->eth->blast",
			expectedData: "9cd134710000000000000000000000000000000000000000000000000000000000013e310000000000000000000000003b9e571adecb0c277486036d6097e9c2cccfa9d900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000051dac207a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000178d8546c5f78e01133858958355b06ec3406a1a00000000000000000000000000000000000000000000000000000000664437e2",
			sourceChain:  "arbitrum",
			targetChain:  "blast",
			amount:       decimal.New(0, 0),
			tokenName:    "ETH",
			recipient:    common.HexToAddress("0x178D8546C5f78e01133858958355B06EC3406A1A"),
			sender:       common.HexToAddress("0x178D8546C5f78e01133858958355B06EC3406A1A"),
			relayer:      common.HexToAddress("0x3b9e571adecb0c277486036d6097e9c2cccfa9d9"),
			transferId:   common.HexToHash(""),
			totalFee:     decimal.RequireFromString("90000000000000"),
			to:           common.HexToAddress("0xbA5D580B18b6436411562981e02c8A9aA1776D10"),
			timestamp:    1715746786,
			Value:        big.NewInt(90000000000000),
		},
		{
			name:         "darwinia-rng>arbitrum:v3",
			expectedData: "9cd13471000000000000000000000000000000000000000000000000000000000000a4b1000000000000000000000000ec1d823af449b27f3e6fce58049d20b8e1c84fa500000000000000000000000000000000000000000000000000000000000000000000000000000000000000009e523234d36973f9e38642886197d023c88e307e0000000000000000000000000000000000000000000000174f766f41cebe80000000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000178d8546c5f78e01133858958355b06ec3406a1a0000000000000000000000000000000000000000000000000000000066531c28",
			sourceChain:  "darwinia-dvm",
			targetChain:  "arbitrum",
			amount:       decimal.New(1, 0),
			tokenName:    "RING",
			recipient:    common.HexToAddress("0x178D8546C5f78e01133858958355B06EC3406A1A"),
			sender:       common.HexToAddress("0x178D8546C5f78e01133858958355B06EC3406A1A"),
			relayer:      common.HexToAddress("0xec1d823af449b27f3e6fce58049d20b8e1c84fa5"),
			transferId:   common.HexToHash(""),
			totalFee:     decimal.RequireFromString("430001000000000000000"),
			to:           common.HexToAddress("0xbA5D580B18b6436411562981e02c8A9aA1776D10"),
			timestamp:    1716722728,
			Value:        decimal.RequireFromString("431001000000000000000").BigInt(),
		},
		// 0错误:x9cd13471000000000000000000000000000000000000000000000000000000000000a4b1000000000000000000000000ec1d823af449b27f3e6fce58049d20b8e1c84fa500000000000000000000000000000000000000000000000000000000000000000000000000000000000000009e523234d36973f9e38642886197d023c88e307e0000000000000000000000000000000000000000000000174f72e1c329f800000000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000178d8546c5f78e01133858958355b06ec3406a1a0000000000000000000000000000000000000000000000000000000066532283
		// 正确:0x9cd13471000000000000000000000000000000000000000000000000000000000000a4b1000000000000000000000000ec1d823af449b27f3e6fce58049d20b8e1c84fa500000000000000000000000000000000000000000000000000000000000000000000000000000000000000009e523234d36973f9e38642886197d023c88e307e0000000000000000000000000000000000000000000000174f766f41cebe80000000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000178d8546c5f78e01133858958355b06ec3406a1a0000000000000000000000000000000000000000000000000000000066531c28
		// 正确:0x9cd13471000000000000000000000000000000000000000000000000000000000000a4b1000000000000000000000000ec1d823af449b27f3e6fce58049d20b8e1c84fa500000000000000000000000000000000000000000000000000000000000000000000000000000000000000009e523234d36973f9e38642886197d023c88e307e0000000000000000000000000000000000000000000000174f766f41cebe80000000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000178d8546c5f78e01133858958355b06ec3406a1a00000000000000000000000000000000000000000000000000000000665323ec
		// 正确:0x9cd13471000000000000000000000000000000000000000000000000000000000000a4b1000000000000000000000000ec1d823af449b27f3e6fce58049d20b8e1c84fa500000000000000000000000000000000000000000000000000000000000000000000000000000000000000009e523234d36973f9e38642886197d023c88e307e0000000000000000000000000000000000000000000000174f766f41cebe80000000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000178d8546c5f78e01133858958355b06ec3406a1a0000000000000000000000000000000000000000000000000000000066531c28
		// 错误:0x9cd13471000000000000000000000000000000000000000000000000000000000000a4b1000000000000000000000000ec1d823af449b27f3e6fce58049d20b8e1c84fa500000000000000000000000000000000000000000000000000000000000000000000000000000000000000009e523234d36973f9e38642886197d023c88e307e0000000000000000000000000000000000000000000000174f72e1c329f800000000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000178d8546c5f78e01133858958355b06ec3406a1a0000000000000000000000000000000000000000000000000000000066532374
	}

	for _, arg := range args {
		t.Run(arg.name, func(t *testing.T) {
			v3 := NewV3(Options{
				SourceTokenName: arg.tokenName,
				TargetTokenName: arg.tokenName,
				SourceChain:     arg.sourceChain,
				TargetChain:     arg.targetChain,
				Config:          *conf,
				Sender:          arg.sender,
				Recipient:       arg.recipient,
				Amount:          arg.amount,
			})
			tx, err := v3.Do(context.Background(), TransferOptions{
				Relayer:         arg.relayer,
				TransferId:      arg.transferId,
				TotalFee:        arg.totalFee,
				WithdrawNonce:   arg.withdrawNonce,
				DepositedMargin: arg.DepositedMargin,
				timestamp:       arg.timestamp,
			})
			assert.NoError(t, err)
			assert.Equal(t, arg.expectedData, common.Bytes2Hex(tx.Data))
			assert.Equal(t, arg.to.String(), tx.To.String())
			assert.Equal(t, tx.Value.String(), arg.Value.String())
		})
	}
}
