package darwinia

import (
	"context"
	"omni-balance/utils/chains"
	"omni-balance/utils/constant"
	"omni-balance/utils/wallets"
	"strings"
	"testing"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/shopspring/decimal"
	"github.com/stretchr/testify/assert"
)

type TestVar struct {
	ctx    context.Context
	client *ethclient.Client
	sender wallets.Wallets
}

func InitVar(t *testing.T) TestVar {
	client, err := ethclient.Dial("https://rpc.darwinia.network")
	assert.NoError(t, err)
	return TestVar{
		ctx:    constant.WithTestCtx(context.Background()),
		client: client,
		sender: wallets.NewWallets(wallets.WalletConfig{
			PrivateKey: constant.TestPrivateKey,
			Address:    common.HexToAddress(constant.TestWalletAddress),
		}),
	}
}

func TestEthereum2darwinia(t *testing.T) {
	var (
		conf   = InitVar(t)
		amount = decimal.NewFromBigInt(chains.EthToWei(decimal.RequireFromString("0")), 0)
	)
	conf.ctx = context.WithValue(conf.ctx, constant.FeeTestKeyInCtx, decimal.RequireFromString("1"))

	type args struct {
		ctx  context.Context
		args SwapParams
	}
	tests := []struct {
		name     string
		args     args
		wantData string
		wantTo   string
		wantErr  assert.ErrorAssertionFunc
	}{
		{
			name: "ethereum2darwiniaForRING",
			args: args{
				ctx: conf.ctx,
				args: SwapParams{
					Sender:    conf.sender,
					TokenName: "RING",
					Amount:    amount,
					Nonce:     1716964432673,
					Client:    conf.client,
				},
			},

			wantData: "cf5a8bd80000000000000000000000004ca75992d2750bec270731a72dfdede6b9e71cc700000000000000000000000043ef13e84d9992d1461a1f90cac4653658cea4fd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000018fc30e1b2100000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000080000000000000000000000000092e19c46c9daab7824393f1cd9c22f5bea135600000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000001443ef13e84d9992d1461a1f90cac4653658cea4fd000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000546d800000000000000000000000043ef13e84d9992d1461a1f90cac4653658cea4fd00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000",
			wantTo:   "0xc29dCb1F12a1618262eF9FBA673b77140adc02D6",
			wantErr:  nil,
		},
		{
			name: "ethereum2darwiniaForKTON",
			args: args{
				ctx: conf.ctx,
				args: SwapParams{
					Sender:    conf.sender,
					TokenName: "KTON",
					Amount:    amount,
					Nonce:     1716965255138,
					Client:    conf.client,
				},
			},
			wantData: "57bf09850000000000000000000000009f284e1337a815fe77d2ff4ae46544645b20c5ff0000000000000000000000004ca75992d2750bec270731a72dfdede6b9e71cc700000000000000000000000043ef13e84d9992d1461a1f90cac4653658cea4fd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000018fc31aa7e200000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000006000000000000000000000000043ef13e84d9992d1461a1f90cac4653658cea4fd000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000005458200000000000000000000000043ef13e84d9992d1461a1f90cac4653658cea4fd00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000",
			wantTo:   "0xDc0C760c0fB4672D06088515F6446a71Df0c64C1",
			wantErr:  nil,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			tx, err := Ethereum2darwinia(tt.args.ctx, tt.args.args)
			assert.NoError(t, err)
			assert.Equal(t, tt.wantTo, tx.To.Hex())
			assert.Equalf(t, strings.ToLower(tt.wantData), strings.ToLower(common.Bytes2Hex(tx.Data)), "Ethereum2darwinia(%v, %v)", tt.args.ctx, tt.args.args)
		})
	}
}
